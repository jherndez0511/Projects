AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2 helped a bit"
Description: "Stack for RAA - VPC, Subnet, IGW, NATGWY layer. Step:2"
Parameters:
  Environment:
    Type: "String"
    Default: "prod"
    Description: By selecting the prefix i.e. "prod", you will create new stack for RAA  product.
    AllowedValues:
      - "prod"
      - "dev"
  ProductName:
    Type: "String"
    Default: "RANDA"
    Description: This is reserved for Product Name. No need to change it.
    AllowedValues:
      - "RANDA"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.162.0.100/16'
    PublicA:
      CIDR: '10.162.0.0/20'
    PrivateA1:
      CIDR: '10.162.16.0/20'
    PrivateA2:
      CIDR: '10.162.32.0/20'
    PublicB:
      CIDR: '10.162.48.0/20'
    PrivateB1:
      CIDR: '10.162.64.0/20'
    PrivateB2:
      CIDR: '10.162.80.0/20'
    PublicC:
      CIDR: '10.162.96.0/20'
    PrivateC1:
      CIDR: '10.162.112.0/20'
    PrivateC2:
      CIDR: '10.162.128.0/20'
    PrivateA3: 
      CIDR: '10.162.144.0/20'
    PrivateB3: 
      CIDR: '10.162.160.0/20'
    PrivateC3: 
      CIDR: '10.162.176.0/20'


Resources:
  #VPC - Main configuration
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags: 
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Description"
        Value: "host RAA product line"
      - 
        Key: "Name"
        Value:  !Join ['', [!Ref "Environment", "-raa-vpc" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicA', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "public subnet hence publicly accessible products only"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PublicA-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicB', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "public subnet hence publicly accessible products only"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PublicB-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName



  SubnetRouteTableAssociationPublicSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA


  SubnetRouteTableAssociationPublicSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB


  SubnetAssociationPublicSubnetA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationPublicSubnetBA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateA1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA1
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateA2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA2
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateA3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA3
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB1
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB2
      NetworkAclId: !Ref VPCNetworkAcl

  SubnetAssociationSubnetPrivateB3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB3
      NetworkAclId: !Ref VPCNetworkAcl


  SubnetPrivateA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateA1', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "private subnet hence only accessible from Public subnet or between other subnets"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PrivateA1-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateA1SubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref SubnetPrivateA1


  SubnetPrivateA2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateA2', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "private subnet hence only accessible from Public subnet or between other subnets"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PrivateA2-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateA2ZoneA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref SubnetPrivateA2



  SubnetPrivateA3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateA3', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "private subnet hence only accessible from Public subnet or between other subnets"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PrivateA3-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateA3ZoneA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref SubnetPrivateA3


  SubnetPrivateB1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateB1', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Description"
        Value: "private subnet hence only accessible from Public subnet or between other subnets"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-PrivateB1-Subnet" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateB1ZoneB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref SubnetPrivateB1




  SubnetPrivateB2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId: !Ref 'VPC'
        CidrBlock: !FindInMap ['SubnetConfig', 'PrivateB2', 'CIDR']
        MapPublicIpOnLaunch: false
        Tags: 
        - 
          Key: "Description"
          Value: "private subnet hence only accessible from Public subnet or between other subnets"
        - 
          Key: "Environment"
          Value: !Ref Environment
        - 
          Key: "Name"
          Value: !Join ['', [!Ref "Environment", "-PrivateB2-Subnet" ]]
        - 
          Key: "Product"
          Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateB2ZoneB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref SubnetPrivateB2


  SubnetPrivateB3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId: !Ref 'VPC'
        CidrBlock: !FindInMap ['SubnetConfig', 'PrivateB3', 'CIDR']
        MapPublicIpOnLaunch: false
        Tags: 
        - 
          Key: "Description"
          Value: "private subnet hence only accessible from Public subnet or between other subnets"
        - 
          Key: "Environment"
          Value: !Ref Environment
        - 
          Key: "Name"
          Value: !Join ['', [!Ref "Environment", "-PrivateB3-Subnet" ]]
        - 
          Key: "Product"
          Value: !Ref ProductName


  SubnetRouteTableAssociationPrivateB3ZoneB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref SubnetPrivateB3


  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: "default"
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-RAA-IGW" ]]
      - 
        Key: "Product"
        Value: !Ref ProductName

  VPCGatewayAttachmentInternetGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicRouteInternet:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

      

  NatGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnetA
      AllocationId: !GetAtt EIPA.AllocationId
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-RAA-NetGW-A" ]]
        
  NatGatewayB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnetB
      AllocationId: !GetAtt EIPB.AllocationId
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-RAA-NetGW-B" ]]



  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-rt-raa-route-private" ]] 


  PrivateRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-rt-raa-route-privateA" ]] 

  PrivateRouteTableB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-rt-raa-route-privateB" ]] 


  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - 
        Key: "Name"
        Value: !Join ['', [!Ref "Environment", "-rt-raa-route-public" ]] 


  RouteNatGateway:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTableA

  RouteNatGatewayB:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateRouteTableB



  PrimaryNetworkInterface:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Primary network interface for Public Subnet A"
      SubnetId: !Ref PublicSubnetA
      SourceDestCheck: true
      GroupSet: 
      - !Ref SecurityGroupSSH
      - !Ref SecurityGroupHTTPS
      
      
  PrimaryNetworkInterfaceB:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: "Primary network interface for Public Subnet B"
      SubnetId: !Ref PublicSubnetB
      SourceDestCheck: true
      GroupSet: 
      - !Ref SecurityGroupSSH
      - !Ref SecurityGroupHTTPS


  EIPA:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags: 
      - 
        Key: "Description"
        Value: "Elastic IP"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Product"
        Value: !Ref ProductName
        
  EIPB:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags: 
      - 
        Key: "Description"
        Value: "Elastic IP"
      - 
        Key: "Environment"
        Value: !Ref Environment
      - 
        Key: "Product"
        Value: !Ref ProductName



  VPCEndpointEC2:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      SubnetIds: 
       - !Ref SubnetPrivateA1
       - !Ref SubnetPrivateB1
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref RandaInternalSecurityGroup
        - !Ref RandaDefaultSecurityGroup


  VPCEndpointSSM:
      Type: "AWS::EC2::VPCEndpoint"
      Properties:
        VpcEndpointType: "Interface"
        VpcId: !Ref VPC
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
        SubnetIds: 
        - !Ref SubnetPrivateA1
        - !Ref SubnetPrivateB1
        PrivateDnsEnabled: true
        SecurityGroupIds: 
            - !Ref RandaInternalSecurityGroup
            - !Ref RandaDefaultSecurityGroup

  VPCEndpointEC2Messages:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      SubnetIds: 
      - !Ref SubnetPrivateA1
      - !Ref SubnetPrivateB1
      PrivateDnsEnabled: true
      SecurityGroupIds: 
          - !Ref RandaInternalSecurityGroup
          - !Ref RandaDefaultSecurityGroup

  VPCEndpointSSMMessages:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
      SubnetIds: 
      - !Ref SubnetPrivateA1
      - !Ref SubnetPrivateB1
      PrivateDnsEnabled: true
      SecurityGroupIds: 
          - !Ref RandaInternalSecurityGroup
          - !Ref RandaDefaultSecurityGroup



  RandaDefaultSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Default security group
      GroupName: !Join ['',['SG-',!Ref Environment,"-default-security-group"]]
      SecurityGroupIngress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
      SecurityGroupEgress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Join ['',['SG-',!Ref Environment,"-default-security-group"]]
    Metadata:
      Comment: This resource is only used to obtain the default security group ID



  SecurityGroupSSH:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Open port 22 for SSH for remote capabilities"
      GroupName: !Join ['',['SG-',!Ref Environment,"-SSH"]]
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - 
        CidrIp: !GetAtt VPC.CidrBlock
        Description: ""
        FromPort: 22
        IpProtocol: "tcp"
        ToPort: 22
      SecurityGroupEgress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Join ['',['SG-',!Ref Environment,"-SSH"]]

  SecurityGroupHTTPS:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Open port 80 (http) and 443 (https) for web traffic"
      GroupName: !Join ['',['SG-',!Ref Environment,"-HTTP-S"]]
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - 
        CidrIp: "0.0.0.0/0"
        FromPort: 80
        IpProtocol: "tcp"
        ToPort: 80
      - 
        CidrIpv6: "::/0"
        FromPort: 80
        IpProtocol: "tcp"
        ToPort: 80
      - 
        CidrIp: "0.0.0.0/0"
        FromPort: 443
        IpProtocol: "tcp"
        ToPort: 443
      - 
        CidrIpv6: "::/0"
        FromPort: 443
        IpProtocol: "tcp"
        ToPort: 443
      SecurityGroupEgress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Join ['',['SG-',!Ref Environment,"-HTTP-S"]]

  RandaVPCPrefixList:
    Type: AWS::EC2::PrefixList
    Properties:
      PrefixListName: !Join ['',['pl-',!Ref Environment,"-vpcprefixlist"]]
      AddressFamily: "IPv4"
      MaxEntries: 100
      Entries:
        - Cidr: "40.142.96.144/29"
          Description: "ODC2-DALLAS"
        - Cidr: "40.142.17.48/29"
          Description: "ODC1-CHICAGO"
        - Cidr: "64.159.218.16/29"
          Description: "CHI-CHICAGO CORPORATE"
        - Cidr: "12.172.214.136/29"
          Description: "LBJ1"
        - Cidr: "216.198.87.144/29"
          Description: "LBJ2"
      Tags: 
        - 
          Key: "Description"
          Value: "Randa VPC Prefix List"
        - 
          Key: "Environment"
          Value: !Ref Environment
        - 
          Key: "Product"
          Value: !Ref ProductName


  VPCNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "Environment", "-RAA-NACL-VPC" ]]


  RandaAllowAllInboundRuleVPCEndpointThoughtSpot:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 99
      Protocol: -1  # All protocols
      RuleAction: allow
      Egress: false
      CidrBlock: 10.228.128.0/25

  RandaAllowAllInboundRuleSafeRange:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 107  
      Protocol: 6  # Protocol number for TCP
      RuleAction: allow
      Egress: false  # false for inbound rule
      CidrBlock: '0.0.0.0/0'  # Allow from all IP addresses
      PortRange:
        From: 1024
        To: 65535


  RandaAllowAllInboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 108 
      Protocol: 6  # Protocol number for TCP
      RuleAction: allow
      Egress: false  # false for inbound rule
      CidrBlock: '0.0.0.0/0'  # Allow from all IP addresses
      PortRange:
        From: 80
        To: 80


  RandaAllowAllInboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 109
      Protocol: 6  # Protocol number for TCP
      RuleAction: allow
      Egress: false  # false for inbound rule
      CidrBlock: '0.0.0.0/0'  # Allow from all IP addresses
      PortRange:
        From: 443
        To: 443



  RandaDenyAllInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 32766  # Set to a value higher than any allow rules
      Protocol: -1  # All protocols
      RuleAction: deny
      Egress: false
      CidrBlock: 0.0.0.0/0  # Deny from all sources

  RandaOutboundRule:
      Type: AWS::EC2::NetworkAclEntry
      DependsOn: VPCNetworkAcl
      Properties:
        NetworkAclId: !Ref VPCNetworkAcl
        RuleNumber: 100
        Protocol: -1
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0

  RandaAllowAllOutboundRuleVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 101
      Protocol: -1  # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: !GetAtt VPC.CidrBlock

  RandaOutboundThoughtSpotRule:
      Type: AWS::EC2::NetworkAclEntry
      DependsOn: VPCNetworkAcl
      Properties:
        NetworkAclId: !Ref VPCNetworkAcl
        RuleNumber: 102
        Protocol: -1
        RuleAction: allow
        Egress: true
        CidrBlock: 10.228.128.0/25

  RandaAllowAllOutboundRuleThoughtSpotCloud:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNetworkAcl
      RuleNumber: 103
      Protocol: -1  # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 35.160.44.67/32


  RandaSSMInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable SSH and HTTP access"
      GroupName: !Join ['',['SG-',!Ref Environment,"-ssminstancesecuritygroup"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Join ['',['SG-',!Ref Environment,"-ssminstancesecuritygroup"]]



  RandaInternalSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable all access across VPC"
      GroupName: !Join ['',['SG-',!Ref Environment,"-internal-all"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - 
            CidrIp: !GetAtt VPC.CidrBlock
            IpProtocol: "-1"
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Join ['',['SG-',!Ref Environment,"-internal-all"]]


#OUTPUT SECTION, MOSTLY USED FOR EXPORTING KEYS\IDS FOR REFERENCE PURPOSES IN NEW STACKS\LAYERS
Outputs:
  ExportPublicSubnetA:
    Description: PublicSubnetA info
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportPublicSubnetA" ]] 
  ExportPublicSubnetB:
    Description: PublicSubnetB info
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportPublicSubnetB" ]] 
  ExportSubnetPrivateA1:
    Description: SubnetPrivateA1 info
    Value: !Ref SubnetPrivateA1
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateA1" ]] 
  ExportSubnetPrivateA2:
    Description: SubnetPrivateA2 info
    Value: !Ref SubnetPrivateA2
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateA2" ]] 
  ExportSubnetPrivateA3:
    Description: SubnetPrivateA3 info
    Value: !Ref SubnetPrivateA3
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateA3" ]] 
  ExportSubnetPrivateB1:
    Description: SubnetPrivateB1 info
    Value: !Ref SubnetPrivateB1
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateB1" ]] 
  ExportSubnetPrivateB2:
    Description: SubnetPrivateB2 info
    Value: !Ref SubnetPrivateB2
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateB2" ]]  
  ExportSubnetPrivateB3:
    Description: SubnetPrivateB3 info
    Value: !Ref SubnetPrivateB3
    Export:
      Name: !Join ['', [!Ref "Environment", "-ExportSubnetPrivateB3" ]]      


  #InternetGateway
  ExportInternetGateway:
    Description: InternetGateway info
    Value: !Ref InternetGateway
    Export:
      Name: !Join ['', [!Ref "Environment", "-InternetGateway" ]]  

  #NatGatewayA
  ExportNatGatewayA:
    Description: NatGatewayA info
    Value: !Ref NatGatewayA
    Export:
      Name: !Join ['', [!Ref "Environment", "-NatGatewayA" ]]  

  #NatGatewayB
  ExportNatGatewayB:
    Description: NatGatewayB info
    Value: !Ref NatGatewayB
    Export:
      Name: !Join ['', [!Ref "Environment", "-NatGatewayB" ]]  


  #EIP
  ExportEIPA:
    Description: Gateway A Elastic IP info
    Value: !Ref EIPA
    Export:
      Name: !Join ['', [!Ref "Environment", "-EIPA" ]]  

  #EIP
  ExportEIPB:
    Description: Gateway B Elastic IP info
    Value: !Ref EIPB
    Export:
      Name: !Join ['', [!Ref "Environment", "-EIPB" ]]  

  #VPC
  ExportVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Join ['', [!Ref "Environment", "-VPCID" ]] 